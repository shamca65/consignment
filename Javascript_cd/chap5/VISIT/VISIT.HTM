<HTML>
<HEAD>
<SCRIPT LANGUAGE="JavaScript">


<!--  to hide script contents from old browsers

//

//  Cookie Functions

//  Written by:  Bill Dortch, hIdaho Design

//  The following functions are released to the public domain.

//



//

// "Internal" function to encode cookie value.  This permits cookies to

// contain whitespace, comma and semicolon characters.

//

function encode (str) {

  var dest = "";

  var len = str.length;

  var index = 0;

  var code = null;

  for (var i = 0; i < len; i++) {

    var ch = str.charAt(i);

    if (ch == " ") code = "%20";

    else if (ch == "%") code = "%25";

    else if (ch == ",") code = "%2C";

    else if (ch == ";") code = "%3B";

    else if (ch == "\b") code = "%08";

    else if (ch == "\t") code = "%09";

    else if (ch == "\n") code = "%0A";

    else if (ch == "\f") code = "%0C";

    else if (ch == "\r") code = "%0D";

    if (code != null) {

      dest += str.substring(index,i) + code;

      index = i + 1;

      code = null;

    }

  }

  if (index < len)

    dest += str.substring(index, len);

  return dest;

}



//

// "Internal" function to decode cookie values.

//

function decode (str) {

  var dest = "";

  var len = str.length;

  var index = 0;

  var code = null;

  var i = 0;

  while (i < len) {

    i = str.indexOf ("%", i);

    if (i == -1)

      break;

    if (index < i)

      dest += str.substring(index, i);

    code = str.substring (i+1,i+3);

    i += 3;

    index = i;

    if (code == "20") dest += " ";

    else if (code == "25") dest += "%";

    else if (code == "2C") dest += ",";

    else if (code == "3B") dest += ";";

    else if (code == "08") dest += "\b";

    else if (code == "09") dest += "\t";

    else if (code == "0A") dest += "\n";

    else if (code == "0C") dest += "\f";

    else if (code == "0D") dest += "\r";

    else {

      i -= 2;

      index -= 3;

    }

  }        

  if (index < len)

    dest += str.substring(index, len);

  return dest;

}



//

// "Internal" function to return the decoded value of a cookie

//

function getCookieVal (offset) {

  var endstr = document.cookie.indexOf (";", offset);

  if (endstr == -1)

    endstr = document.cookie.length;

  return decode(document.cookie.substring(offset, endstr));

}



//

//  Function to return the value of the cookie specified by "name".

//    name - String object containing the cookie name.

//

function GetCookie (name) {

  var arg = name + "=";

  var alen = arg.length;

  var clen = document.cookie.length;

  var i = 0;

  while (i < clen) {

    var j = i + alen;

    if (document.cookie.substring(i, j) == arg)

      return getCookieVal (j);

    i = document.cookie.indexOf(" ", i) + 2;
//  i = document.cookie.indexOf(" ", i) + 1;

    if (i == 0) break; 

  }

  return null;

}



//

//  Function to create or update a cookie.

//    name - String object object containing the cookie name

//    value - String object containing the cookie value.  May contain

//      any valid sting characters, including whitespace, commas and quotes.

//    expires - Date object containing the expiration data of the cookie,

//      or null to expire the cookie at the end of the current session.

//

function SetCookie (name, value, expires) {

  document.cookie = name + "=" + encode(value) + ((expires == null) ? "" : ("; expires=" + expires.toString()));

}



//  Function to delete a cookie. (Sets expiration date to current date/time)

//    name - String object containing the cookie name

//

function DeleteCookie (name) {

  var exp = new Date();

  var cval = GetCookie (name);

  document.cookie = name + "=" + cval + "; expires=" + exp.toGMTString();

}

///////////////////////////////////////////////////////////////////////////////



function setLastVisitCookie()
{
var nowDate = new Date()
var expdate = new Date()

        expdate.setTime (expdate.getTime() + 30*(24 * 60 * 60 * 1000)) // 30 days from now
    SetCookie ("Last_Visit", nowDate.toGMTString(), expdate)
}

// --> <!-- end hiding contents from old browsers  -->

</SCRIPT>

<TITLE>Your Last Visit
</TITLE>
</HEAD>

<BODY onLoad="setLastVisitCookie()">


<CENTER>
<H1>Your Last Visit</H1>
<HR>
<SCRIPT LANGUAGE="JavaScript">


<!--  to hide script contents from old browsers

var lastVisit = GetCookie("Last_Visit")
var htmlOut = ""

    if (lastVisit == null) {
        htmlOut += "No record of you visiting in last 30 days."
    } else {
        htmlOut += "Your last visit was " + lastVisit.substring(0,25)
    } // if

    document.write("<H3>")
    document.write(htmlOut.bold().fontcolor("red"))
    document.write("</H3>")
    
// --> <!-- end hiding contents from old browsers  -->

</SCRIPT>

</CENTER>
<p>

</BODY>
</HTML>
